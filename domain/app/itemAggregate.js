// Generated by CoffeeScript 1.6.3
(function() {
  var Item, colors;

  colors = require("./colors");

  Item = (function() {
    function Item(id) {
      this.id = id;
      this.text = "";
      this._destroy = false;
      this.uncommittedEvents = [];
    }

    Item.prototype.createItem = function(evt, callback) {
      evt.payload.id = this.id;
      if (evt.payload.text === "") {
        return callback(new Error("It is not allowed to set an item text to empty string."));
      } else {
        this.apply(evt);
        return callback(null, this.uncommittedEvents);
      }
    };

    Item.prototype.changeItem = function(evt, callback) {
      if (evt.payload.text === "") {
        return callback(new Error("It is not allowed to set an item text to empty string."));
      } else {
        this.apply(evt);
        return callback(null, this.uncommittedEvents);
      }
    };

    Item.prototype.deleteItem = function(evt, callback) {
      this.apply(evt);
      return callback(null, this.uncommittedEvents);
    };

    Item.prototype.apply = function(evt) {
      this["_" + evt.event](evt);
      if (!evt.fromHistory) {
        return this.uncommittedEvents.push(evt);
      }
    };

    Item.prototype._itemCreated = function(evt) {
      return this.text = evt.payload.text;
    };

    Item.prototype._itemChanged = function(evt) {
      return this.text = evt.payload.text;
    };

    Item.prototype._itemDeleted = function(evt) {
      return this._destroy = true;
    };

    Item.prototype.loadFromHistory = function(history) {
      var e, i, len, _results;
      i = 0;
      len = history.length;
      _results = [];
      while (i < len) {
        e = history[i].payload;
        e.fromHistory = true;
        this.apply(e);
        _results.push(i++);
      }
      return _results;
    };

    return Item;

  })();

  exports.create = function(id) {
    return new Item(id);
  };

}).call(this);
