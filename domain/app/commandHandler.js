// Generated by CoffeeScript 1.6.3
(function() {
  var async, colors, commandHandler, db, es, eventstore, items, map, publisher, redis, storage;

  redis = require("redis");

  colors = require("./colors");

  async = require("async");

  items = require("./itemAggregate");

  eventstore = require("eventstore");

  storage = require("eventstore.redis");

  db = redis.createClient();

  publisher = {
    evt: redis.createClient(),
    publish: function(evt) {
      var msg;
      msg = JSON.stringify(evt, null, 4);
      console.log(colors.green("\npublishing event to redis:"));
      console.log(msg);
      return publisher.evt.publish("events", msg);
    }
  };

  es = eventstore.createStore();

  es.configure(function() {
    es.use(db);
    es.use(publisher);
    return es.use(storage.createStorage());
  }).start();

  map = {
    mappings: {
      createItem: "itemCreated",
      changeItem: "itemChanged",
      deleteItem: "itemDeleted"
    },
    toEvent: function(cmd) {
      cmd.id = cmd.id + "_event_0";
      cmd.event = (map.mappings[cmd.command] ? map.mappings[cmd.command] : "unknown");
      delete cmd.command;
      return cmd;
    }
  };

  commandHandler = {
    handle: function(cmd) {
      var cmdName, evt, id;
      cmdName = cmd.command;
      id = cmd.payload.id;
      evt = map.toEvent(cmd);
      evt.time = new Date();
      return async.waterfall([
        function(callback) {
          if (!id) {
            return db.incr("nextItemId", function(err, id) {
              var newId;
              newId = "item:" + id;
              console.log(colors.cyan("create a new aggregate with id= " + newId));
              return callback(null, items.create(newId));
            });
          } else {
            console.log(colors.cyan("create existing aggregate with id= " + id));
            return callback(null, items.create(id));
          }
        }, function(item, callback) {
          console.log(colors.cyan("load history for id= " + item.id));
          return es.getEventStream(item.id, function(err, stream) {
            return callback(null, item, stream);
          });
        }, function(item, stream, callback) {
          console.log(colors.cyan("apply existing events " + stream.events.length));
          item.loadFromHistory(stream.events);
          console.log(colors.magenta("apply new event " + evt.event + " to aggregate"));
          return item[cmdName](evt, function(err, uncommitted) {
            if (err) {
              return console.log(colors.red(err));
            } else {
              stream.addEvent(uncommitted[0]);
              return stream.commit();
            }
          });
        }
      ]);
    }
  };

  exports.handle = commandHandler.handle;

}).call(this);
